{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Copier PDM \u00a4 Copier template for Python projects managed by PDM. This copier template is mainly for my own usage, but feel free to try it out, or fork it! Also checkout copier-poetry , which is the same template but with Poetry instead of PDM. See how to migrate to copier-pdm . Features \u00a4 PDM setup, with pre-defined pyproject.toml Documentation built with MkDocs ( Material theme and \"autodoc\" mkdocstrings plugin ) Pre-configured tools for code formatting, quality analysis and testing: black , flake8 and plugins, isort , mypy , safety Tests run with pytest and plugins, with coverage support Cross-platform tasks with duty Support for GitHub workflow and Gitlab CI Python 3.6 or above Auto-generated CHANGELOG.md from git commits (using Angular message style) Auto-generated CREDITS.md from Python dependencies All licenses from choosealicense.com Makefile for convenience Quick setup and usage \u00a4 Make sure all the requirements are met, then: copier \"https://github.com/pawamoy/copier-pdm.git\" /path/to/your/new/project Or even shorter: copier \"gh:pawamoy/copier-pdm\" /path/to/your/new/project See the documentation for more details.","title":"Overview"},{"location":"#copier-pdm","text":"Copier template for Python projects managed by PDM. This copier template is mainly for my own usage, but feel free to try it out, or fork it! Also checkout copier-poetry , which is the same template but with Poetry instead of PDM. See how to migrate to copier-pdm .","title":"Copier PDM"},{"location":"#features","text":"PDM setup, with pre-defined pyproject.toml Documentation built with MkDocs ( Material theme and \"autodoc\" mkdocstrings plugin ) Pre-configured tools for code formatting, quality analysis and testing: black , flake8 and plugins, isort , mypy , safety Tests run with pytest and plugins, with coverage support Cross-platform tasks with duty Support for GitHub workflow and Gitlab CI Python 3.6 or above Auto-generated CHANGELOG.md from git commits (using Angular message style) Auto-generated CREDITS.md from Python dependencies All licenses from choosealicense.com Makefile for convenience","title":"Features"},{"location":"#quick-setup-and-usage","text":"Make sure all the requirements are met, then: copier \"https://github.com/pawamoy/copier-pdm.git\" /path/to/your/new/project Or even shorter: copier \"gh:pawamoy/copier-pdm\" /path/to/your/new/project See the documentation for more details.","title":"Quick setup and usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.2.5 - 2021-05-22 \u00a4 Compare with 0.2.4 Code Refactoring \u00a4 Clean up docs, improve theming ( daeb614 by Timoth\u00e9e Mazzucotelli). 0.2.4 - 2021-05-16 \u00a4 Compare with 0.2.3 Bug Fixes \u00a4 Append missing trailing new lines ( f382682 by Timoth\u00e9e Mazzucotelli). 0.2.3 - 2021-05-16 \u00a4 Compare with 0.2.2 Code Refactoring \u00a4 Don't restrict to Python <3.10, set dev status to 4 ( 03e5065 by Timoth\u00e9e Mazzucotelli). 0.2.2 - 2021-05-16 \u00a4 Compare with 0.2.1 Bug Fixes \u00a4 Fix combining coverage on shells without globbing ( a2d7e17 by Timoth\u00e9e Mazzucotelli). 0.2.1 - 2021-05-08 \u00a4 Compare with 0.2.0 Bug Fixes \u00a4 Fix mypy warnings in docs/macros.py ( 517b0ba by Timoth\u00e9e Mazzucotelli). 0.2.0 - 2021-05-08 \u00a4 Compare with 0.1.3 Features \u00a4 Add a py.typed file to enable MyPy annotations discovery ( 94b64c2 by Timoth\u00e9e Mazzucotelli). Code Refactoring \u00a4 Install all dependencies at once before quality in CI ( 64e231a by Timoth\u00e9e Mazzucotelli). Improve and simplify coverage configuration ( f622786 by Timoth\u00e9e Mazzucotelli). 0.1.3 - 2021-05-06 \u00a4 Compare with 0.1.2 Code Refactoring \u00a4 Update for PDM 1.5 ( 100d7ac by Timoth\u00e9e Mazzucotelli). 0.1.2 - 2021-04-18 \u00a4 Compare with 0.1.1 Bug Fixes \u00a4 Install a working PDM version ( 23f9c6a by Timoth\u00e9e Mazzucotelli). 0.1.1 - 2021-04-05 \u00a4 Compare with 0.1.0 Bug Fixes \u00a4 Fix caches names in CI ( a1e9bed by Timoth\u00e9e Mazzucotelli). 0.1.0 - 2021-04-04 \u00a4 Compare with first commit This template is based on copier-poetry , but uses PDM for project management. Features \u00a4 Switch to PDM ( cab8b57 by Timoth\u00e9e Mazzucotelli).","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#025-2021-05-22","text":"Compare with 0.2.4","title":"0.2.5 - 2021-05-22"},{"location":"changelog/#code-refactoring","text":"Clean up docs, improve theming ( daeb614 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#024-2021-05-16","text":"Compare with 0.2.3","title":"0.2.4 - 2021-05-16"},{"location":"changelog/#bug-fixes","text":"Append missing trailing new lines ( f382682 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#023-2021-05-16","text":"Compare with 0.2.2","title":"0.2.3 - 2021-05-16"},{"location":"changelog/#code-refactoring_1","text":"Don't restrict to Python <3.10, set dev status to 4 ( 03e5065 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#022-2021-05-16","text":"Compare with 0.2.1","title":"0.2.2 - 2021-05-16"},{"location":"changelog/#bug-fixes_1","text":"Fix combining coverage on shells without globbing ( a2d7e17 by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#021-2021-05-08","text":"Compare with 0.2.0","title":"0.2.1 - 2021-05-08"},{"location":"changelog/#bug-fixes_2","text":"Fix mypy warnings in docs/macros.py ( 517b0ba by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#020-2021-05-08","text":"Compare with 0.1.3","title":"0.2.0 - 2021-05-08"},{"location":"changelog/#features","text":"Add a py.typed file to enable MyPy annotations discovery ( 94b64c2 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"changelog/#code-refactoring_2","text":"Install all dependencies at once before quality in CI ( 64e231a by Timoth\u00e9e Mazzucotelli). Improve and simplify coverage configuration ( f622786 by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#013-2021-05-06","text":"Compare with 0.1.2","title":"0.1.3 - 2021-05-06"},{"location":"changelog/#code-refactoring_3","text":"Update for PDM 1.5 ( 100d7ac by Timoth\u00e9e Mazzucotelli).","title":"Code Refactoring"},{"location":"changelog/#012-2021-04-18","text":"Compare with 0.1.1","title":"0.1.2 - 2021-04-18"},{"location":"changelog/#bug-fixes_3","text":"Install a working PDM version ( 23f9c6a by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#011-2021-04-05","text":"Compare with 0.1.0","title":"0.1.1 - 2021-04-05"},{"location":"changelog/#bug-fixes_4","text":"Fix caches names in CI ( a1e9bed by Timoth\u00e9e Mazzucotelli).","title":"Bug Fixes"},{"location":"changelog/#010-2021-04-04","text":"Compare with first commit This template is based on copier-poetry , but uses PDM for project management.","title":"0.1.0 - 2021-04-04"},{"location":"changelog/#features_1","text":"Switch to PDM ( cab8b57 by Timoth\u00e9e Mazzucotelli).","title":"Features"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 You only need two tools, PDM and Copier . python3 -m pip install --user pipx pipx install pdm pipx install copier Running tests \u00a4 To run the tests, use: make test Serving docs \u00a4 You can create a new virtualenv and install mkdocs and mkdocs-material : python3 -m venv venv . venv/bin/activate pip install mkdocs mkdocs-material mkdocs serve You can also install mkdocs with pipx and inject mkdocs-material in its venv, this way you don't need to create one yourself: python3 -m pip install --user pipx pipx install mkdocs pipx inject mkdocs mkdocs-material mkdocs serve","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"You only need two tools, PDM and Copier . python3 -m pip install --user pipx pipx install pdm pipx install copier","title":"Environment setup"},{"location":"contributing/#running-tests","text":"To run the tests, use: make test","title":"Running tests"},{"location":"contributing/#serving-docs","text":"You can create a new virtualenv and install mkdocs and mkdocs-material : python3 -m venv venv . venv/bin/activate pip install mkdocs mkdocs-material mkdocs serve You can also install mkdocs with pipx and inject mkdocs-material in its venv, this way you don't need to create one yourself: python3 -m pip install --user pipx pipx install mkdocs pipx inject mkdocs mkdocs-material mkdocs serve","title":"Serving docs"},{"location":"generate/","text":"Generating a project \u00a4 To generate a project, run the following command: copier \"https://github.com/pawamoy/copier-pdm.git\" /path/to/your/new/project Or with a shorter command: copier \"gh:pawamoy/copier-pdm\" /path/to/your/new/project You can even generate a project without installing copier, using pipx : pipx run copier \"gh:pawamoy/copier-pdm\" /path/to/your/new/project Questions \u00a4 Copier will then ask you to answer some questions: Your project name project_name? Format: str \ud83c\udfa4 [None]: My Project The project name can use spaces and capitals. It will be used as the main heading in the README for example. Your project description project_description? Format: str \ud83c\udfa4 [None]: My super project! The project description can be as long as you want, and use any character you want. Your full name author_fullname? Format: str \ud83c\udfa4 [None]: Timoth\u00e9e Mazzucotelli The full name will appear as \"author\" in the project's metadata. Your email author_email? Format: str \ud83c\udfa4 [None]: pawamoy@pm.me The full name will appear as \"author email\" in the project's metadata. Your username (e.g. on GitHub) author_username? Format: str \ud83c\udfa4 [None]: pawamoy The username you are using on the git repository provider. Your repository provider repository_provider? Format: str \ud83c\udfa4 (1) github.com (2) gitlab.com (3) bitbucket.org Choice [1]: The repository provider on which you plan to store your project. By default it chooses github.com. Your repository namespace repository_namespace? Format: str \ud83c\udfa4 [pawamoy]: The namespace (or account) on which the project will be stored. It defaults to the username you provided. Your repository name repository_name? Format: str \ud83c\udfa4 [my-project]: The repository name on the selected provider. It defaults to a slugified version of your project's name. The name of the person/entity holding the copyright copyright_holder? Format: str \ud83c\udfa4 [Timoth\u00e9e Mazzucotelli]: The name of the person or entity holding the copyright on the project. It defaults to the full name your provided. The email of the person/entity holding the copyright copyright_holder_email? Format: str \ud83c\udfa4 [pawamoy@pm.me]: The email of the person or entity holding the copyright on the project. It defaults to the email your provided. The copyright date copyright_date? Format: str \ud83c\udfa4 [2020]: The date to apply to the copyright. It defaults to the current year. Your project's license copyright_license? Format: str \ud83c\udfa4 (1) Academic Free License v3.0 (2) Apache License 2.0 (3) Artistic License 2.0 (4) BSD 2-Clause \"Simplified\" License (5) BSD 3-Clause Clear License (6) BSD 3-Clause \"New\" or \"Revised\" License (7) Boost Software License 1.0 (8) Creative Commons Attribution 4.0 (9) Creative Commons Attribution Share Alike 4.0 (10) Creative Commons Zero v1.0 Universal (11) Do What The F*ck You Want To Public License (12) Educational Community License v2.0 (13) Eclipse Public License 1.0 (14) Eclipse Public License 2.0 (15) European Union Public License 1.1 (16) European Union Public License 1.2 (17) GNU Affero General Public License v3.0 (18) GNU General Public License v2.0 (19) GNU General Public License v3.0 (20) GNU Lesser General Public License v2.1 (21) GNU Lesser General Public License v3.0 (22) ISC License (23) LaTeX Project Public License v1.3c (24) MIT License (25) Mozilla Public License 2.0 (26) Microsoft Public License (27) Microsoft Reciprocal License (28) University of Illinois/NCSA Open Source License (29) SIL Open Font License 1.1 (30) Open Software License 3.0 (31) PostgreSQL License (32) The Unlicense (33) zlib License Choice [22]: A license from choosealicence.com. It defaults to ISC License (my personal preference). Your Python package distribution name (for `pip install NAME`) python_package_distribution_name? Format: str \ud83c\udfa4 [my-project]: The name under which your Python package will be distributed. This will be the name of your project on pypi.org for example. Your Python package import name (for `import NAME` in Python code) python_package_import_name? Format: str \ud83c\udfa4 [my_project]: The name that will be used to import your package in Python code. Yes, distribution name and import name can be different! Your CLI name if any (for use in the shell) python_package_command_line_name? Format: str \ud83c\udfa4 [my-project]: The name of the command users will type in the command line to run your program. Output \u00a4 At this point, Copier will generate the project in the specified directory: create pyproject.toml create mkdocs.yml create duties.py create .copier-answers.yml create README.md create Makefile create LICENSE create CREDITS.md create CONTRIBUTING.md create CODE_OF_CONDUCT.md create CHANGELOG.md create .gitlab-ci.yml create .gitignore create tests/ create tests/test_cli.py create tests/conftest.py create tests/__init__.py create src/ create src/my_project/ create src/my_project/cli.py create src/my_project/__main__.py create src/my_project/__init__.py create scripts/ create scripts/setup.sh create scripts/post_generation.py create scripts/multirun.sh create docs/ create docs/index.md create docs/credits.md create docs/contributing.md create docs/code_of_conduct.md create docs/changelog.md create docs/reference/ create docs/reference/cli.md create docs/css/ create docs/css/mkdocstrings.css create config/ create config/pytest.ini create config/mypy.ini create config/coverage.ini create .github/ create .github/FUNDING.yml create .github/workflows/ create .github/workflows/ci.yml create .github/ISSUE_TEMPLATE/ create .github/ISSUE_TEMPLATE/feature_request.md create .github/ISSUE_TEMPLATE/bug_report.md > Running task 1 of 1: python scripts/post_generation.py Project sucessfully generated! Run `make` to show the available actions. See the next chapter to learn how to work on this new project.","title":"Generating a project"},{"location":"generate/#generating-a-project","text":"To generate a project, run the following command: copier \"https://github.com/pawamoy/copier-pdm.git\" /path/to/your/new/project Or with a shorter command: copier \"gh:pawamoy/copier-pdm\" /path/to/your/new/project You can even generate a project without installing copier, using pipx : pipx run copier \"gh:pawamoy/copier-pdm\" /path/to/your/new/project","title":"Generating a project"},{"location":"generate/#questions","text":"Copier will then ask you to answer some questions: Your project name project_name? Format: str \ud83c\udfa4 [None]: My Project The project name can use spaces and capitals. It will be used as the main heading in the README for example. Your project description project_description? Format: str \ud83c\udfa4 [None]: My super project! The project description can be as long as you want, and use any character you want. Your full name author_fullname? Format: str \ud83c\udfa4 [None]: Timoth\u00e9e Mazzucotelli The full name will appear as \"author\" in the project's metadata. Your email author_email? Format: str \ud83c\udfa4 [None]: pawamoy@pm.me The full name will appear as \"author email\" in the project's metadata. Your username (e.g. on GitHub) author_username? Format: str \ud83c\udfa4 [None]: pawamoy The username you are using on the git repository provider. Your repository provider repository_provider? Format: str \ud83c\udfa4 (1) github.com (2) gitlab.com (3) bitbucket.org Choice [1]: The repository provider on which you plan to store your project. By default it chooses github.com. Your repository namespace repository_namespace? Format: str \ud83c\udfa4 [pawamoy]: The namespace (or account) on which the project will be stored. It defaults to the username you provided. Your repository name repository_name? Format: str \ud83c\udfa4 [my-project]: The repository name on the selected provider. It defaults to a slugified version of your project's name. The name of the person/entity holding the copyright copyright_holder? Format: str \ud83c\udfa4 [Timoth\u00e9e Mazzucotelli]: The name of the person or entity holding the copyright on the project. It defaults to the full name your provided. The email of the person/entity holding the copyright copyright_holder_email? Format: str \ud83c\udfa4 [pawamoy@pm.me]: The email of the person or entity holding the copyright on the project. It defaults to the email your provided. The copyright date copyright_date? Format: str \ud83c\udfa4 [2020]: The date to apply to the copyright. It defaults to the current year. Your project's license copyright_license? Format: str \ud83c\udfa4 (1) Academic Free License v3.0 (2) Apache License 2.0 (3) Artistic License 2.0 (4) BSD 2-Clause \"Simplified\" License (5) BSD 3-Clause Clear License (6) BSD 3-Clause \"New\" or \"Revised\" License (7) Boost Software License 1.0 (8) Creative Commons Attribution 4.0 (9) Creative Commons Attribution Share Alike 4.0 (10) Creative Commons Zero v1.0 Universal (11) Do What The F*ck You Want To Public License (12) Educational Community License v2.0 (13) Eclipse Public License 1.0 (14) Eclipse Public License 2.0 (15) European Union Public License 1.1 (16) European Union Public License 1.2 (17) GNU Affero General Public License v3.0 (18) GNU General Public License v2.0 (19) GNU General Public License v3.0 (20) GNU Lesser General Public License v2.1 (21) GNU Lesser General Public License v3.0 (22) ISC License (23) LaTeX Project Public License v1.3c (24) MIT License (25) Mozilla Public License 2.0 (26) Microsoft Public License (27) Microsoft Reciprocal License (28) University of Illinois/NCSA Open Source License (29) SIL Open Font License 1.1 (30) Open Software License 3.0 (31) PostgreSQL License (32) The Unlicense (33) zlib License Choice [22]: A license from choosealicence.com. It defaults to ISC License (my personal preference). Your Python package distribution name (for `pip install NAME`) python_package_distribution_name? Format: str \ud83c\udfa4 [my-project]: The name under which your Python package will be distributed. This will be the name of your project on pypi.org for example. Your Python package import name (for `import NAME` in Python code) python_package_import_name? Format: str \ud83c\udfa4 [my_project]: The name that will be used to import your package in Python code. Yes, distribution name and import name can be different! Your CLI name if any (for use in the shell) python_package_command_line_name? Format: str \ud83c\udfa4 [my-project]: The name of the command users will type in the command line to run your program.","title":"Questions"},{"location":"generate/#output","text":"At this point, Copier will generate the project in the specified directory: create pyproject.toml create mkdocs.yml create duties.py create .copier-answers.yml create README.md create Makefile create LICENSE create CREDITS.md create CONTRIBUTING.md create CODE_OF_CONDUCT.md create CHANGELOG.md create .gitlab-ci.yml create .gitignore create tests/ create tests/test_cli.py create tests/conftest.py create tests/__init__.py create src/ create src/my_project/ create src/my_project/cli.py create src/my_project/__main__.py create src/my_project/__init__.py create scripts/ create scripts/setup.sh create scripts/post_generation.py create scripts/multirun.sh create docs/ create docs/index.md create docs/credits.md create docs/contributing.md create docs/code_of_conduct.md create docs/changelog.md create docs/reference/ create docs/reference/cli.md create docs/css/ create docs/css/mkdocstrings.css create config/ create config/pytest.ini create config/mypy.ini create config/coverage.ini create .github/ create .github/FUNDING.yml create .github/workflows/ create .github/workflows/ci.yml create .github/ISSUE_TEMPLATE/ create .github/ISSUE_TEMPLATE/feature_request.md create .github/ISSUE_TEMPLATE/bug_report.md > Running task 1 of 1: python scripts/post_generation.py Project sucessfully generated! Run `make` to show the available actions. See the next chapter to learn how to work on this new project.","title":"Output"},{"location":"license/","text":"ISC License Copyright (c) 2019, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"migrate/","text":"Migrate from copier-poetry \u00a4 If you were using copier-poetry before, and would like to migrate to this template based on PDM, here is how: # go into your project cd my_project # upgrade to the latest of copier-poetry copier -f update Reference the new template in .copier-answers.yml : _commit : e9e472d _src_path : gh:pawamoy/copier-pdm.git Now clean up your repository, commit the changes, and update again: copier -f update That's it! You should now be up-to-date with the latest copier-pdm stuff!","title":"Migrating from copier-poetry"},{"location":"migrate/#migrate-from-copier-poetry","text":"If you were using copier-poetry before, and would like to migrate to this template based on PDM, here is how: # go into your project cd my_project # upgrade to the latest of copier-poetry copier -f update Reference the new template in .copier-answers.yml : _commit : e9e472d _src_path : gh:pawamoy/copier-pdm.git Now clean up your repository, commit the changes, and update again: copier -f update That's it! You should now be up-to-date with the latest copier-pdm stuff!","title":"Migrate from copier-poetry"},{"location":"requirements/","text":"Requirements \u00a4 To use this Copier template, you will need: git v2 Python 3 Copier To install git version 2, follow the official instructions . To install Python 3, download and install it from the official website , or install it with pyenv : # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3 pyenv install 3 .8.6 # make it available globally pyenv global system 3 .8.6 # finally, restart your shell # to make sure your environment is up-to-date To install Copier, use pip or pipx : pip install --user copier pip install --user pipx pipx install copier","title":"Requirements"},{"location":"requirements/#requirements","text":"To use this Copier template, you will need: git v2 Python 3 Copier To install git version 2, follow the official instructions . To install Python 3, download and install it from the official website , or install it with pyenv : # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3 pyenv install 3 .8.6 # make it available globally pyenv global system 3 .8.6 # finally, restart your shell # to make sure your environment is up-to-date To install Copier, use pip or pipx : pip install --user copier pip install --user pipx pipx install copier","title":"Requirements"},{"location":"update/","text":"Updating a project \u00a4 Copier has an \"update\" feature. It means that, once a project is generated, you can keep updating it with the latest changes that happen in the template. It's particularly useful when you manage a lot of projects, all generated from the same template, and you want to apply a change to all your projects. Example: the template fixed a bug in the Makefile. You don't want to apply it manually to your projects. To update your project, go into its directory, and run copier update . Your repository must be clean (no modified files) when running this command. Copier will use the previous answers you gave when generating the project, to re-generate it in a temporary directory, compare the two versions, and apply patches to your documents. When it's not sure, or when there's a conflict, it will ask you if you want to skip that change or force it. Your previous answers are stored in the .copier-answers.yml file at the root of the project directory: \ud83d\udcc1 my-project \u251c\u2500\u2500 \ud83d\udcc4 .copier-answers.yml \u2514\u2500\u2500 \ud83d\udcc4 etc. And the file looks like this: # Changes here will be overwritten by Copier _commit : 0.1.10 _src_path : gh:pawamoy/copier-pdm author_email : pawamoy@pm.me author_fullname : \"Timoth \\xE9 e Mazzucotelli\" author_username : pawamoy copyright_date : '2020' copyright_holder : \"Timoth \\xE9 e Mazzucotelli\" copyright_holder_email : pawamoy@pm.me copyright_license : ISC License project_description : Automatic documentation from sources, for MkDocs. project_name : mkdocstrings python_package_command_line_name : mkdocstrings python_package_distribution_name : mkdocstrings python_package_import_name : mkdocstrings repository_name : mkdocstrings repository_namespace : pawamoy repository_provider : github.com If you want to use all previous answers without copier prompting you for each answer, run copier --force update . Since we are generally using Git in our projects, my recommendation is to not think at all and blindly apply every change Copier proposes. Indeed, you'll be able to see the diff with git diff , un-apply changes on whole files with git checkout -- FILE if they are not relevant, or do partial, interactive commits with git add -p or within your IDE interface (PyCharm at least has very good support and UX for selecting and committing changes).","title":"Updating a project"},{"location":"update/#updating-a-project","text":"Copier has an \"update\" feature. It means that, once a project is generated, you can keep updating it with the latest changes that happen in the template. It's particularly useful when you manage a lot of projects, all generated from the same template, and you want to apply a change to all your projects. Example: the template fixed a bug in the Makefile. You don't want to apply it manually to your projects. To update your project, go into its directory, and run copier update . Your repository must be clean (no modified files) when running this command. Copier will use the previous answers you gave when generating the project, to re-generate it in a temporary directory, compare the two versions, and apply patches to your documents. When it's not sure, or when there's a conflict, it will ask you if you want to skip that change or force it. Your previous answers are stored in the .copier-answers.yml file at the root of the project directory: \ud83d\udcc1 my-project \u251c\u2500\u2500 \ud83d\udcc4 .copier-answers.yml \u2514\u2500\u2500 \ud83d\udcc4 etc. And the file looks like this: # Changes here will be overwritten by Copier _commit : 0.1.10 _src_path : gh:pawamoy/copier-pdm author_email : pawamoy@pm.me author_fullname : \"Timoth \\xE9 e Mazzucotelli\" author_username : pawamoy copyright_date : '2020' copyright_holder : \"Timoth \\xE9 e Mazzucotelli\" copyright_holder_email : pawamoy@pm.me copyright_license : ISC License project_description : Automatic documentation from sources, for MkDocs. project_name : mkdocstrings python_package_command_line_name : mkdocstrings python_package_distribution_name : mkdocstrings python_package_import_name : mkdocstrings repository_name : mkdocstrings repository_namespace : pawamoy repository_provider : github.com If you want to use all previous answers without copier prompting you for each answer, run copier --force update . Since we are generally using Git in our projects, my recommendation is to not think at all and blindly apply every change Copier proposes. Indeed, you'll be able to see the diff with git diff , un-apply changes on whole files with git checkout -- FILE if they are not relevant, or do partial, interactive commits with git add -p or within your IDE interface (PyCharm at least has very good support and UX for selecting and committing changes).","title":"Updating a project"},{"location":"work/","text":"Working on a project \u00a4 The generated project has this structure: \ud83d\udcc1 your_project ------------------- # your freshly created project! \u251c\u2500\u2500 \ud83d\udcc4 CHANGELOG.md --------------- # \u251c\u2500\u2500 \ud83d\udcc4 CODE_OF_CONDUCT.md --------- # \u251c\u2500\u2500 \ud83d\udcc1 config --------------------- # tools configuration files \u2502 \u251c\u2500\u2500 \ud83d\udcc4 coverage.ini ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 mypy.ini --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 pytest.ini ------------- # \u251c\u2500\u2500 \ud83d\udcc4 CONTRIBUTING.md ------------ # \u251c\u2500\u2500 \ud83d\udcc4 CREDITS.md ----------------- # \u251c\u2500\u2500 \ud83d\udcc1 docs ----------------------- # documentation pages \u2502 \u251c\u2500\u2500 \ud83d\udcc4 changelog.md ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 code_of_conduct.md ----- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 contributing.md -------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 credits.md ------------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc1 css -------------------- # extra CSS files \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocstrings.css --- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 index.md --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc1 reference -------------- # code reference pages \u2502 \u2514\u2500\u2500 \ud83d\udcc4 cli.md ------------- # \u251c\u2500\u2500 \ud83d\udcc4 duties.py ------------------ # the project's tasks \u251c\u2500\u2500 \ud83d\udcc4 LICENSE -------------------- # \u251c\u2500\u2500 \ud83d\udcc4 Makefile ------------------- # \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml ----------------- # docs configuration \u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml ------------- # project metadata and dependencies \u251c\u2500\u2500 \ud83d\udcc4 README.md ------------------ # \u251c\u2500\u2500 \ud83d\udcc1 scripts -------------------- # helper scripts \u2502 \u251c\u2500\u2500 \ud83d\udcc4 multirun.sh ------------ # to run a command against multiple Python versions \u2502 \u2514\u2500\u2500 \ud83d\udcc4 setup.sh --------------- # to install dependencies for multiple Python versions \u251c\u2500\u2500 \ud83d\udcc1 src ------------------------ # the source code directory \u2502 \u2514\u2500\u2500 \ud83d\udcc1 your_package ----------- # your package \u2502 \u251c\u2500\u2500 \ud83d\udcc4 cli.py ------------- # the command line entry point \u2502 \u251c\u2500\u2500 \ud83d\udcc4 __init__.py -------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 __main__.py -------- # \u2514\u2500\u2500 \ud83d\udcc1 tests ---------------------- # the tests directory \u251c\u2500\u2500 \ud83d\udcc4 conftest.py ------------ # pytest fixtures, etc. \u251c\u2500\u2500 \ud83d\udcc4 __init__.py ------------ # \u2514\u2500\u2500 \ud83d\udcc4 test_cli.py ------------ # Dependencies and virtual environments \u00a4 Dependencies are managed by PDM . Use pdm install to install the dependencies. Dependencies are written in pyproject.toml , under the [project] , [project.optional-dependencies] and [tool.pdm.dev-dependencies] sections. Example: [project] dependencies = [ \"fastapi~=1.0\" , \"importlib-metadata~=2.0\" , ] You can write them there manually, or use the commands provided by PDM: pdm add numpy # add as a required dependency pdm add -s math numpy # add as an optional dependency in the \"math\" section pdm add -d numpy # or add as a development dependency in the \"dev\" section pdm add -ds stats numpy # or add as a development dependency in the \"stats\" section # the \"remove\" equivalent pdm remove numpy pdm remove -s math numpy pdm remove -d numpy pdm remove -ds stats numpy Use pdm update the re-lock the dependencies (write the complete dependency resolution in pdm.lock ) and install their updated version. Use pdm lock to just re-lock the dependencies. Use pdm run CMD [ARGS...] to run a command installed in __pypackages__ Use pdm list to show the list of dependencies. See pdm COMMAND --help for details about each command. Tasks \u00a4 The tasks are written in Python (for cross-platform compatibility), and based on the task-runner called duty . They are written in the duties.py file, and decorated with the @duty decorator. Example: @duty def check_docs ( ctx ): \"\"\"Check if the documentation builds correctly.\"\"\" ctx . run ( \"mkdocs build -s\" , title = \"Building documentation\" ) To run a task, use pdm run duty TASK [ARG=VALUE...] . You can run multiple tasks at once: pdm run duty TASK1 ARG=VALUE TASK2 . You can list the available tasks with pdm run duty --list . Available tasks: changelog : Update the changelog in-place with latest commits. See the Changelog section . check : Check it all! See the Quality Analysis section . check-code-quality : Check the code quality. See the check-code-quality section . check-dependencies : Check for vulnerabilities in dependencies. See the check-dependencies section . check-docs : Check if the documentation builds correctly. See the check-docs section . check-types : Check that the code is correctly typed. See the check-types section . clean : Delete temporary files. coverage : Report coverage as text and HTML. docs : Build the documentation locally. See the Documentation section . docs-serve : Serve the documentation (localhost:8000). Arguments: host=\"127.0.0.1\" : The host to serve the docs from. port=8000 : The port to serve the docs on. format : Run formatting tools on the code. release : Release a new Python package. See the Releases section . Arguments: version The Python package version. test : Run the test suite. See the Tests section . Arguments: match=\"\" : A pytest expression to filter selected tests. Makefile \u00a4 A Makefile is available for convenience. It's just a shortcut to run duties. Available rules are the same, with two additional rules: help and setup . changelog check check-code-quality check-dependencies check-docs check-types clean coverage docs docs-serve format release setup test The default rule is help , so running make will show the available rules. The setup rule is explained below. Workflow \u00a4 The first thing you should run when entering your repository is: make setup This will install the project's dependencies in __pypackages__ : one folder per chosen Python version. The chosen Python versions are defined in both scripts setup.sh and multirun.sh in the scripts/ folder. You can change them here permanently, or temporarily with the PYTHON_VERSIONS environment variable. If you don't have the make command, you can use bash scripts/setup.sh instead, or even just pdm install if you don't plan on using multiple Python versions. Now you can start writing and editing code in src/your_package . You can auto-format the code with make format . You can run a quality analysis with make check . Once you wrote tests for your new code, you can run the test suite with make test . Once you are ready to publish a new release, run make changelog , then make release version=x.y.z , where x.y.z is the version added to the changelog. To summarize, the typical workflow is: make setup # only once <write code> make format # to auto-format the code <write tests> make test # to run the test suite make check # to check if everything is OK <commit your changes> make changelog # to update the changelog <edit changelog if needed> make release version = x.y.z Remember that make is just a shortcut for pdm run duty here. Quality analysis \u00a4 The quality checks are started with: make check This action is actually a composition of several checks: check-code-quality : Check the code quality. check-dependencies : Check for vulnerabilities in dependencies. check-docs : Check if the documentation builds correctly. check-types : Check if the code is correctly typed. For example, if you are only interested in checking types, run make check-types . check-code-quality \u00a4 The code quality analysis is done with Flakehell , a wrapper around Flake8 , and a battery of Flake8 plugins. The analysis is configured in pyproject.toml , section [tool.flakehell] . In this file, you can deactivate rules or activate others to customize your analysis. Rules identifiers always start with one or more capital letters, like D , S or BLK , then followed by a number. You can ignore a rule on a specific code line by appending a noqa comment (\"no quality analysis/assurance\"): print ( \"a code line that triggers a flake8 warning\" ) # noqa: ID ...where ID is the identifier of the rule you want to ignore for this line. Example: # src/your_package/module.py import subprocess $ make check-code-quality \u2717 Checking code quality (1) > flake8 --config=config/flake8.ini src/ tests/ scripts/ src/your_package/module.py:2:1: S404 Consider possible security implications associated with subprocess module. Now add a comment to ignore this warning. As a best-practice, and because rules identifiers are not self-explanatory, add a comment explaining why we ignore the warning: # module.py import subprocess # noqa: S404 (we don't mind the security implications) $ make check-code-quality \u2713 Checking code quality You can disable multiple different warnings on a single line by separating them with commas: markdown_docstring = \"\"\" Look at this docstring: ```python \\\"\\\"\\\" print(\"code block\") \\\"\\\"\\\" ``` \"\"\" # noqa: D300,D301 (escape sequences: it's not a regex) You can disable a warning globally by adding its ID into the list in pyproject.toml , section [tool.flakehell.plugins] . You can also disable warnings per file, like so: # in pyproject.toml [tool.flakehell.exceptions.\"src/your_package/your_module.py\"] \"*\" = [ \"-WPS407\" , # mutable constant ] check-dependencies \u00a4 This action uses the tool safety to check if the production dependencies used in the project are subject to CVEs by querying an online database. An example of full report looks like the following: +==============================================================================+ | REPORT | +============================+===========+==========================+==========+ | package | installed | affected | ID | +============================+===========+==========================+==========+ | django | 1.2 | <1.2.2 | 25701 | +==============================================================================+ | Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows | | remote attackers to inject arbitrary web script or HTML via a csrfmiddlewar | | etoken (aka csrf_token) cookie. | +==============================================================================+ check-docs \u00a4 This action builds the documentation with strict behavior: any warning will be considered an error and the command will fail. The warnings/errors can be about incorrect docstring format, or invalid cross-references. See the Documentation section for more information. check-types \u00a4 This action runs mypy on the source code to find potential typing errors. Tests \u00a4 Run the test suite with: make test Behind the scenes, it uses pytest and plugins to collect and run the tests, and output a report. Code source coverage is computed thanks to coveragepy . Sometimes you don't want to run the whole test suite, but rather one particular test, or group of tests. Pytest provides a -k option to allow filtering the tests. The Makefile test rule therefore accept a match= argument to specify the value of Pytest's -k option: make test match=training make test match=\"app and route2\" Example of output: Test session starts (platform: linux, Python 3.8.6, pytest 6.2.1, pytest-sugar 0.9.4) Using --randomly-seed=281943462 rootdir: /home/pawamoy/data/dev/pawamoy/duty, configfile: config/pytest.ini plugins: randomly-3.5.0, xdist-2.2.0, forked-1.3.0, cov-2.10.1, sugar-0.9.4 collecting ... tests/test_logic.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 15% \u2588\u258b tests/test_cli.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 86% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ----------- coverage: platform linux, python 3.8.6-final-0 ----------- Name Stmts Miss Branch BrPart Cover -------------------------------------------------------- src/duty/cli.py 62 0 20 0 100.00% src/duty/logic.py 71 0 18 0 100.00% -------------------------------------------------------- TOTAL 133 0 38 0 100.00% Results (0.76s): 78 passed Continuous Integration \u00a4 The quality checks and tests are executed in parallel in a GitHub Workflow or in GitLab CI . For GitHub, the CI is configured in .github/ci/workflow.yml , and for GitLab it's configured in .gitlab-ci.yml . To force a step to pass even when it fails, add nofail=CI or nofail=True to the corresponding ctx.run instruction in duties.py Changelog \u00a4 Changelogs are absolutely useful when your software is updated regularly, to inform your users about the new features that were added or the bugs that were fixed. But writing a changelog manually is a cumbersome process. This is why we offer, with this template, a way to automatically update the changelog. There is one requirement though for it to work: you must use the Angular commit message convention . For a quick reference: <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. The two most important are feat and fix types. For other types of commits, you can do as you like. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Examples: feat: Add training route fix: Stop deleting user data Following that convention will allow to generate new entries in the changelog while following the rules of semantic versioning . Once you are ready to publish a new release of your package, run the following command: make changelog This will update the changelog in-place, using the latest, unpublished-yet commits. If this group of commits contains only bug fixes ( fix: ) and/or commits that are not interesting for users ( chore: , style: , etc.), the changelog will gain a new patch entry. It means that the new suggested version will be a patch bump of the previous one: 0.1.1 becomes 0.1.2 . If this group of commits contains at least one feature ( feat: ), the changelog will gain a new minor entry. It means that the new suggested version will be a minor bump of the previous one: 0.1.1 becomes 0.2.0 . If there is, in this group, a commit whose body contains something like Breaking change , the changelog will gain a new major entry, unless the version is still an \"alpha\" version (starting with 0), in which case it gains a minor entry. It means that the new suggested version will be a major bump of the previous one: 1.2.1 becomes 2.0.0 , but 0.2.1 is only bumped up to 0.3.0 . Moving from \"alpha\" status to \"beta\" or \"stable\" status is a choice left to the developers, when they consider the package is ready for it. Finally, once your changelog has been updated, make sure its contents are correct (add, remove or edit anything you need), and use the new version (the one that was added into the changelog) to create a new release: make release version=x.y.z ...where x.y.z is the version added in the changelog. Releases \u00a4 As seen in the previous section, you can use the release rule of the Makefile to publish new versions of the Python package. Usually, just before running make release version=x.y.z , you run make changelog to update the changelog and use the newly added version as the argument to make release . For example, if after running make changelog , the diff shows a new 0.5.1 entry in the changelog, you must release this exact same version with make release version=0.5.1 . The release action does several things, in this order: Update the version in pyproject.toml Stage the modified files ( pyproject.toml and CHANGELOG.md ) Commit the changes with a message like chore: Prepare release 0.5.1 Tag the commit with that version Push the commits Push the tags Build the package dist and wheel Publish the dist and wheel to PyPI.org Documentation \u00a4 The documentation is built with Mkdocs , the Material for Mkdocs theme, and the mkdocstrings plugin. Writing \u00a4 The pages are written in Markdown, and thanks to mkdocstrings , even your Python docstrings can be written in Markdown. mkdocstrings particularly supports the Google-style for docstrings. The documentation configuration is written into mkdocs.yml , at the root of the project. The Markdown pages are written in the docs/ directory. You can use any level of nesting you want. The left-sidebar navigation is configured through the nav key in mkdocs.yml . For example, with these docs structure: \ud83d\udcc1 docs \u251c\u2500\u2500 \ud83d\udcc4 changelog.md \u251c\u2500\u2500 \ud83d\udcc4 index.md \u2514\u2500\u2500 \ud83d\udcc1 reference \u251c\u2500\u2500 \ud83d\udcc4 cli.md \u2514\u2500\u2500 \ud83d\udcc4 logic.md ...you can have these navigation items in mkdocs.yml : nav : - Overview : index.md - Code Reference : - cli.py : reference/cli.md - logic.py : reference/logic.md - Changelog : changelog.md Note that we matched the sections in the navigation with the folder tree, but that is not mandatory. mkdocstrings allows you to inject documentation of Python objects in Markdown pages with the following syntax: ::: path.to.object OPTIONS ...where OPTIONS is a YAML block containing configuration options for both the selection of Python objects and their rendering. You can document an entire module or even package with a single instruction: ::: your_package ...but it's usually better to have each module injected in a separate page. For more information about mkdocstrings , check its documentation . Serving \u00a4 MkDocs provides a development server with files watching and live-reload. Run make docs-serve to serve your documentation on localhost:8000 . If you run it in a remote host (Linux VM) and would like to access it from your local browser, bind the server to 0.0.0.0 instead: make docs-serve host = 0 .0.0.0 If needed, you can also change the port used: make docs-serve host = 0 .0.0.0 port = 5000 Deploying \u00a4 MkDocs has a gh-deploy command that will deploy you documentation on GitHub pages. We make use of this command in the docs-deploy action: make docs-deploy If you'd prefer to deploy on ReadTheDocs instead, you will likely have to write a readthedocs.yml configuration file and enable the project on ReadTheDocs.","title":"Working on a project"},{"location":"work/#working-on-a-project","text":"The generated project has this structure: \ud83d\udcc1 your_project ------------------- # your freshly created project! \u251c\u2500\u2500 \ud83d\udcc4 CHANGELOG.md --------------- # \u251c\u2500\u2500 \ud83d\udcc4 CODE_OF_CONDUCT.md --------- # \u251c\u2500\u2500 \ud83d\udcc1 config --------------------- # tools configuration files \u2502 \u251c\u2500\u2500 \ud83d\udcc4 coverage.ini ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 mypy.ini --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 pytest.ini ------------- # \u251c\u2500\u2500 \ud83d\udcc4 CONTRIBUTING.md ------------ # \u251c\u2500\u2500 \ud83d\udcc4 CREDITS.md ----------------- # \u251c\u2500\u2500 \ud83d\udcc1 docs ----------------------- # documentation pages \u2502 \u251c\u2500\u2500 \ud83d\udcc4 changelog.md ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 code_of_conduct.md ----- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 contributing.md -------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 credits.md ------------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc1 css -------------------- # extra CSS files \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocstrings.css --- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 index.md --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc1 reference -------------- # code reference pages \u2502 \u2514\u2500\u2500 \ud83d\udcc4 cli.md ------------- # \u251c\u2500\u2500 \ud83d\udcc4 duties.py ------------------ # the project's tasks \u251c\u2500\u2500 \ud83d\udcc4 LICENSE -------------------- # \u251c\u2500\u2500 \ud83d\udcc4 Makefile ------------------- # \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml ----------------- # docs configuration \u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml ------------- # project metadata and dependencies \u251c\u2500\u2500 \ud83d\udcc4 README.md ------------------ # \u251c\u2500\u2500 \ud83d\udcc1 scripts -------------------- # helper scripts \u2502 \u251c\u2500\u2500 \ud83d\udcc4 multirun.sh ------------ # to run a command against multiple Python versions \u2502 \u2514\u2500\u2500 \ud83d\udcc4 setup.sh --------------- # to install dependencies for multiple Python versions \u251c\u2500\u2500 \ud83d\udcc1 src ------------------------ # the source code directory \u2502 \u2514\u2500\u2500 \ud83d\udcc1 your_package ----------- # your package \u2502 \u251c\u2500\u2500 \ud83d\udcc4 cli.py ------------- # the command line entry point \u2502 \u251c\u2500\u2500 \ud83d\udcc4 __init__.py -------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 __main__.py -------- # \u2514\u2500\u2500 \ud83d\udcc1 tests ---------------------- # the tests directory \u251c\u2500\u2500 \ud83d\udcc4 conftest.py ------------ # pytest fixtures, etc. \u251c\u2500\u2500 \ud83d\udcc4 __init__.py ------------ # \u2514\u2500\u2500 \ud83d\udcc4 test_cli.py ------------ #","title":"Working on a project"},{"location":"work/#dependencies-and-virtual-environments","text":"Dependencies are managed by PDM . Use pdm install to install the dependencies. Dependencies are written in pyproject.toml , under the [project] , [project.optional-dependencies] and [tool.pdm.dev-dependencies] sections. Example: [project] dependencies = [ \"fastapi~=1.0\" , \"importlib-metadata~=2.0\" , ] You can write them there manually, or use the commands provided by PDM: pdm add numpy # add as a required dependency pdm add -s math numpy # add as an optional dependency in the \"math\" section pdm add -d numpy # or add as a development dependency in the \"dev\" section pdm add -ds stats numpy # or add as a development dependency in the \"stats\" section # the \"remove\" equivalent pdm remove numpy pdm remove -s math numpy pdm remove -d numpy pdm remove -ds stats numpy Use pdm update the re-lock the dependencies (write the complete dependency resolution in pdm.lock ) and install their updated version. Use pdm lock to just re-lock the dependencies. Use pdm run CMD [ARGS...] to run a command installed in __pypackages__ Use pdm list to show the list of dependencies. See pdm COMMAND --help for details about each command.","title":"Dependencies and virtual environments"},{"location":"work/#tasks","text":"The tasks are written in Python (for cross-platform compatibility), and based on the task-runner called duty . They are written in the duties.py file, and decorated with the @duty decorator. Example: @duty def check_docs ( ctx ): \"\"\"Check if the documentation builds correctly.\"\"\" ctx . run ( \"mkdocs build -s\" , title = \"Building documentation\" ) To run a task, use pdm run duty TASK [ARG=VALUE...] . You can run multiple tasks at once: pdm run duty TASK1 ARG=VALUE TASK2 . You can list the available tasks with pdm run duty --list . Available tasks: changelog : Update the changelog in-place with latest commits. See the Changelog section . check : Check it all! See the Quality Analysis section . check-code-quality : Check the code quality. See the check-code-quality section . check-dependencies : Check for vulnerabilities in dependencies. See the check-dependencies section . check-docs : Check if the documentation builds correctly. See the check-docs section . check-types : Check that the code is correctly typed. See the check-types section . clean : Delete temporary files. coverage : Report coverage as text and HTML. docs : Build the documentation locally. See the Documentation section . docs-serve : Serve the documentation (localhost:8000). Arguments: host=\"127.0.0.1\" : The host to serve the docs from. port=8000 : The port to serve the docs on. format : Run formatting tools on the code. release : Release a new Python package. See the Releases section . Arguments: version The Python package version. test : Run the test suite. See the Tests section . Arguments: match=\"\" : A pytest expression to filter selected tests.","title":"Tasks"},{"location":"work/#makefile","text":"A Makefile is available for convenience. It's just a shortcut to run duties. Available rules are the same, with two additional rules: help and setup . changelog check check-code-quality check-dependencies check-docs check-types clean coverage docs docs-serve format release setup test The default rule is help , so running make will show the available rules. The setup rule is explained below.","title":"Makefile"},{"location":"work/#workflow","text":"The first thing you should run when entering your repository is: make setup This will install the project's dependencies in __pypackages__ : one folder per chosen Python version. The chosen Python versions are defined in both scripts setup.sh and multirun.sh in the scripts/ folder. You can change them here permanently, or temporarily with the PYTHON_VERSIONS environment variable. If you don't have the make command, you can use bash scripts/setup.sh instead, or even just pdm install if you don't plan on using multiple Python versions. Now you can start writing and editing code in src/your_package . You can auto-format the code with make format . You can run a quality analysis with make check . Once you wrote tests for your new code, you can run the test suite with make test . Once you are ready to publish a new release, run make changelog , then make release version=x.y.z , where x.y.z is the version added to the changelog. To summarize, the typical workflow is: make setup # only once <write code> make format # to auto-format the code <write tests> make test # to run the test suite make check # to check if everything is OK <commit your changes> make changelog # to update the changelog <edit changelog if needed> make release version = x.y.z Remember that make is just a shortcut for pdm run duty here.","title":"Workflow"},{"location":"work/#quality-analysis","text":"The quality checks are started with: make check This action is actually a composition of several checks: check-code-quality : Check the code quality. check-dependencies : Check for vulnerabilities in dependencies. check-docs : Check if the documentation builds correctly. check-types : Check if the code is correctly typed. For example, if you are only interested in checking types, run make check-types .","title":"Quality analysis"},{"location":"work/#check-code-quality","text":"The code quality analysis is done with Flakehell , a wrapper around Flake8 , and a battery of Flake8 plugins. The analysis is configured in pyproject.toml , section [tool.flakehell] . In this file, you can deactivate rules or activate others to customize your analysis. Rules identifiers always start with one or more capital letters, like D , S or BLK , then followed by a number. You can ignore a rule on a specific code line by appending a noqa comment (\"no quality analysis/assurance\"): print ( \"a code line that triggers a flake8 warning\" ) # noqa: ID ...where ID is the identifier of the rule you want to ignore for this line. Example: # src/your_package/module.py import subprocess $ make check-code-quality \u2717 Checking code quality (1) > flake8 --config=config/flake8.ini src/ tests/ scripts/ src/your_package/module.py:2:1: S404 Consider possible security implications associated with subprocess module. Now add a comment to ignore this warning. As a best-practice, and because rules identifiers are not self-explanatory, add a comment explaining why we ignore the warning: # module.py import subprocess # noqa: S404 (we don't mind the security implications) $ make check-code-quality \u2713 Checking code quality You can disable multiple different warnings on a single line by separating them with commas: markdown_docstring = \"\"\" Look at this docstring: ```python \\\"\\\"\\\" print(\"code block\") \\\"\\\"\\\" ``` \"\"\" # noqa: D300,D301 (escape sequences: it's not a regex) You can disable a warning globally by adding its ID into the list in pyproject.toml , section [tool.flakehell.plugins] . You can also disable warnings per file, like so: # in pyproject.toml [tool.flakehell.exceptions.\"src/your_package/your_module.py\"] \"*\" = [ \"-WPS407\" , # mutable constant ]","title":"check-code-quality"},{"location":"work/#check-dependencies","text":"This action uses the tool safety to check if the production dependencies used in the project are subject to CVEs by querying an online database. An example of full report looks like the following: +==============================================================================+ | REPORT | +============================+===========+==========================+==========+ | package | installed | affected | ID | +============================+===========+==========================+==========+ | django | 1.2 | <1.2.2 | 25701 | +==============================================================================+ | Cross-site scripting (XSS) vulnerability in Django 1.2.x before 1.2.2 allows | | remote attackers to inject arbitrary web script or HTML via a csrfmiddlewar | | etoken (aka csrf_token) cookie. | +==============================================================================+","title":"check-dependencies"},{"location":"work/#check-docs","text":"This action builds the documentation with strict behavior: any warning will be considered an error and the command will fail. The warnings/errors can be about incorrect docstring format, or invalid cross-references. See the Documentation section for more information.","title":"check-docs"},{"location":"work/#check-types","text":"This action runs mypy on the source code to find potential typing errors.","title":"check-types"},{"location":"work/#tests","text":"Run the test suite with: make test Behind the scenes, it uses pytest and plugins to collect and run the tests, and output a report. Code source coverage is computed thanks to coveragepy . Sometimes you don't want to run the whole test suite, but rather one particular test, or group of tests. Pytest provides a -k option to allow filtering the tests. The Makefile test rule therefore accept a match= argument to specify the value of Pytest's -k option: make test match=training make test match=\"app and route2\" Example of output: Test session starts (platform: linux, Python 3.8.6, pytest 6.2.1, pytest-sugar 0.9.4) Using --randomly-seed=281943462 rootdir: /home/pawamoy/data/dev/pawamoy/duty, configfile: config/pytest.ini plugins: randomly-3.5.0, xdist-2.2.0, forked-1.3.0, cov-2.10.1, sugar-0.9.4 collecting ... tests/test_logic.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 15% \u2588\u258b tests/test_cli.py \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 86% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b \u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713\u2713 100% \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 ----------- coverage: platform linux, python 3.8.6-final-0 ----------- Name Stmts Miss Branch BrPart Cover -------------------------------------------------------- src/duty/cli.py 62 0 20 0 100.00% src/duty/logic.py 71 0 18 0 100.00% -------------------------------------------------------- TOTAL 133 0 38 0 100.00% Results (0.76s): 78 passed","title":"Tests"},{"location":"work/#continuous-integration","text":"The quality checks and tests are executed in parallel in a GitHub Workflow or in GitLab CI . For GitHub, the CI is configured in .github/ci/workflow.yml , and for GitLab it's configured in .gitlab-ci.yml . To force a step to pass even when it fails, add nofail=CI or nofail=True to the corresponding ctx.run instruction in duties.py","title":"Continuous Integration"},{"location":"work/#changelog","text":"Changelogs are absolutely useful when your software is updated regularly, to inform your users about the new features that were added or the bugs that were fixed. But writing a changelog manually is a cumbersome process. This is why we offer, with this template, a way to automatically update the changelog. There is one requirement though for it to work: you must use the Angular commit message convention . For a quick reference: <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. The two most important are feat and fix types. For other types of commits, you can do as you like. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Examples: feat: Add training route fix: Stop deleting user data Following that convention will allow to generate new entries in the changelog while following the rules of semantic versioning . Once you are ready to publish a new release of your package, run the following command: make changelog This will update the changelog in-place, using the latest, unpublished-yet commits. If this group of commits contains only bug fixes ( fix: ) and/or commits that are not interesting for users ( chore: , style: , etc.), the changelog will gain a new patch entry. It means that the new suggested version will be a patch bump of the previous one: 0.1.1 becomes 0.1.2 . If this group of commits contains at least one feature ( feat: ), the changelog will gain a new minor entry. It means that the new suggested version will be a minor bump of the previous one: 0.1.1 becomes 0.2.0 . If there is, in this group, a commit whose body contains something like Breaking change , the changelog will gain a new major entry, unless the version is still an \"alpha\" version (starting with 0), in which case it gains a minor entry. It means that the new suggested version will be a major bump of the previous one: 1.2.1 becomes 2.0.0 , but 0.2.1 is only bumped up to 0.3.0 . Moving from \"alpha\" status to \"beta\" or \"stable\" status is a choice left to the developers, when they consider the package is ready for it. Finally, once your changelog has been updated, make sure its contents are correct (add, remove or edit anything you need), and use the new version (the one that was added into the changelog) to create a new release: make release version=x.y.z ...where x.y.z is the version added in the changelog.","title":"Changelog"},{"location":"work/#releases","text":"As seen in the previous section, you can use the release rule of the Makefile to publish new versions of the Python package. Usually, just before running make release version=x.y.z , you run make changelog to update the changelog and use the newly added version as the argument to make release . For example, if after running make changelog , the diff shows a new 0.5.1 entry in the changelog, you must release this exact same version with make release version=0.5.1 . The release action does several things, in this order: Update the version in pyproject.toml Stage the modified files ( pyproject.toml and CHANGELOG.md ) Commit the changes with a message like chore: Prepare release 0.5.1 Tag the commit with that version Push the commits Push the tags Build the package dist and wheel Publish the dist and wheel to PyPI.org","title":"Releases"},{"location":"work/#documentation","text":"The documentation is built with Mkdocs , the Material for Mkdocs theme, and the mkdocstrings plugin.","title":"Documentation"},{"location":"work/#writing","text":"The pages are written in Markdown, and thanks to mkdocstrings , even your Python docstrings can be written in Markdown. mkdocstrings particularly supports the Google-style for docstrings. The documentation configuration is written into mkdocs.yml , at the root of the project. The Markdown pages are written in the docs/ directory. You can use any level of nesting you want. The left-sidebar navigation is configured through the nav key in mkdocs.yml . For example, with these docs structure: \ud83d\udcc1 docs \u251c\u2500\u2500 \ud83d\udcc4 changelog.md \u251c\u2500\u2500 \ud83d\udcc4 index.md \u2514\u2500\u2500 \ud83d\udcc1 reference \u251c\u2500\u2500 \ud83d\udcc4 cli.md \u2514\u2500\u2500 \ud83d\udcc4 logic.md ...you can have these navigation items in mkdocs.yml : nav : - Overview : index.md - Code Reference : - cli.py : reference/cli.md - logic.py : reference/logic.md - Changelog : changelog.md Note that we matched the sections in the navigation with the folder tree, but that is not mandatory. mkdocstrings allows you to inject documentation of Python objects in Markdown pages with the following syntax: ::: path.to.object OPTIONS ...where OPTIONS is a YAML block containing configuration options for both the selection of Python objects and their rendering. You can document an entire module or even package with a single instruction: ::: your_package ...but it's usually better to have each module injected in a separate page. For more information about mkdocstrings , check its documentation .","title":"Writing"},{"location":"work/#serving","text":"MkDocs provides a development server with files watching and live-reload. Run make docs-serve to serve your documentation on localhost:8000 . If you run it in a remote host (Linux VM) and would like to access it from your local browser, bind the server to 0.0.0.0 instead: make docs-serve host = 0 .0.0.0 If needed, you can also change the port used: make docs-serve host = 0 .0.0.0 port = 5000","title":"Serving"},{"location":"work/#deploying","text":"MkDocs has a gh-deploy command that will deploy you documentation on GitHub pages. We make use of this command in the docs-deploy action: make docs-deploy If you'd prefer to deploy on ReadTheDocs instead, you will likely have to write a readthedocs.yml configuration file and enable the project on ReadTheDocs.","title":"Deploying"}]}